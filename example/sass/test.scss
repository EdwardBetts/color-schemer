@import "compass";
@import "color-schemer";



////////////////////////////////////////////



// Pick the base color for your scheme:
$cs-primary: red;

// Select your scheme from the list and place it here:
$cs-scheme: accented-analogic; // mono, complement, triad, tetrad, analogic, accented-analogic

// How distant do you want the hue offset to be:
// $cs-hue-offset: 60;

// How distant do you want tints and shades to be from their base:
$cs-brightness-offset: 10;

$cs-color-model: ryb; // rgb, ryb



////////////////////////////////////////////

@function cs-mix($color1, $color2, $ammount: 50%) {

  $new-color: $color1;
  
  $hue-difference: hue($color1) - hue($color2);
  @if $cs-color-model == ryb {
    $hue-difference: ryb-hue($color1) - ryb-hue($color2);
  }
  $hue-offset: $hue-difference * ($ammount / 100%);

  @if $cs-color-model == ryb {
    $new-color: ryb-adjust-hue($new-color, $hue-offset);
  }
  @else {
    $new-color: adjust-hue($new-color, $hue-offset);
  }

  $lightness-difference: lightness($color1) - lightness($color2);
  $lightness-offset: $lightness-difference * ($ammount / 100%);
  
  $new-color: set-lightness($new-color, lightness($color1) - $lightness-offset);

  @return $new-color;
}

$colors:
  cyan
  cs-mix(cyan, green, 0%)
  green
;


////////////////////////////////////////////
// From Jina Bolton and Eric Meyer -- http://codepen.io/jina/pen/iosjp
@function stripes($position, $colors) {
  $colors: if(type-of($colors) != 'list', compact($colors), $colors);
  $gradient: ();
  $width: 100% / length($colors);

  @for $i from 1 through length($colors) {
    $pop: nth($colors,$i);
    $new: $pop ($width * ($i - 1)), $pop ($width * $i);
    $gradient: join($gradient, $new, comma);
  }

  @return linear-gradient($position, $gradient);
}

html {
  @include background(stripes(left, ($colors)));
}