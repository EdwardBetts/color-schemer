// RYB color interpolation
@function find-ryb($hue) {

  // remove units on $hue
  @if unit($hue) == deg {
    $hue: $hue / 1deg;
  }

  // interpolate red and yellow.
  @if $hue <= (360/3) {
    @return hue(mix(#ff0, #f00, percentage($hue / (360/3) )));
  }
  // interpolate yellow and green.
  @if $hue <= 360 / 2 and  $hue > (360/3) and $hue <= (360 / 3 * 2) {
    @return hue(mix(#0f0, #ff0, percentage(($hue - (360 / 6 * 2)) / (360 / 6))));
  }
  // interpolate green and blue.
  @if $hue > 360 / 2 and  $hue < (360 / 3 * 2) {
    @return hue(mix(#00f, #0f0, percentage(($hue - (360 / 6 * 3)) / (360 / 6)) ));
  }
  // Blue to red does not need conversion.
  @if $hue >= (360 / 3 * 2) {
    @return $hue * 1deg;
  }
}

// Find the RYB hue instead of RGB hue of a color.
// slow dumb loop at the moment.
@function ryb-hue($color) {
  @return find-ryb(hue($color)) - hue($color) * 2;
}

// Changes the hue of a color.
@function ryb-adjust-hue($color, $degrees) {

  // Convert precentag to degrees.
  @if unit($degrees) == "%" {
    $degrees: 360 * ($degrees / 100%);
  }

  // Start at the current hue and loop in the adjustment.
  $hue-adjust: ryb-hue($color) + $degrees;

  // Make on a scale of 1-360deg
  @while $hue-adjust > 360 or $hue-adjust > 360deg {
    $hue-adjust: $hue-adjust - 360;
  }
  @while $hue-adjust < 0 or $hue-adjust < 0deg {
    $hue-adjust: $hue-adjust + 360;
  }

  // return the correct hue from the list.
  @return set-hue($color, find-ryb(round($hue-adjust)));
}

// Returns the complement of a color.
@function ryb-complement($color) {
  @return ryb-adjust-hue($color, 180deg);
}

// Returns the inverse of a color.
@function ryb-invert($color) {
  @return ryb-adjust-hue(hsl(hue($color), saturation(invert($color)), lightness(invert($color))), 180deg);
}