@function cs-interpolate($value, $units: 360, $stops: #FF0000 #FF4900 #FF7400 #FF9200 #FFAA00 #FFBF00 #FFD300 #FFE800 #FFFF00 #CCF600 #9FEE00 #67E300 #00CC00 #00AF64 #009999 #0B61A4 #1240AB #1B1BB3 #3914AF #530FAD #7109AA #A600A6 #CD0074 #E40045) {
  
  // Loop numbers out of scale back into the scale.
  @while $value >= 360 {
    $value: $value - 360;
  }
  @while $value < 0 {
    $value: $value + 360;
  }
  // @debug $value;

  $cs-color-deg: $units / length($stops);
  $cs-deg-count: $cs-color-deg;
  $cs-stop-count: 1;
  $stops: append($stops, nth($stops, 1));
  @for $i from 0 through length($stops) {
    @if $value < $cs-deg-count {
      @return mix(nth($stops, $cs-stop-count + 1), nth($stops, $cs-stop-count), abs(percentage(($cs-deg-count - $value) / $cs-color-deg) - 100 ));
    }
    @else {
      $cs-deg-count: $cs-deg-count + $cs-color-deg;
      $cs-stop-count: $cs-stop-count + 1
    }
  }
  @return $value;
}

// RYB color interpolation
@function find-ryb($hue) {

  // remove units on $hue
  @if unit($hue) == deg {
    $hue: $hue / 1deg;
  }
  @return hue(cs-interpolate($hue));
}

// Find the RYB hue instead of RGB hue of a color.
// slow dumb loop at the moment.
@function ryb-hue($color) {
  $return: (hue($color) - find-ryb(hue($color))) + find-ryb(hue($color));
  @if $return == 360deg {
    $return: 0deg;
  }
  @return $return;
}

// Changes the hue of a color.
@function ryb-adjust-hue($color, $degrees) {
  // Convert precentag to degrees.
  @if unit($degrees) == "%" {
    $degrees: 360 * ($degrees / 100%);
  }

  // Start at the current hue and loop in the adjustment.
  $hue-adjust: ryb-hue($color) + $degrees;

  // Make on a scale of 1-360deg
  @while $hue-adjust > 360 or $hue-adjust > 360deg {
    $hue-adjust: $hue-adjust - 360;
  }
  @while $hue-adjust < 0 or $hue-adjust < 0deg {
    $hue-adjust: $hue-adjust + 360;
  }

  $hue-adjust: $hue-adjust / 1deg;

  $saturation: saturation(cs-interpolate(abs(ryb-hue($color)) / 1deg)) - saturation($color);
  $lightness: lightness(cs-interpolate(abs(ryb-hue($color)) / 1deg)) - lightness($color);

  // Set hue of new color
  $new-color: cs-interpolate($hue-adjust);

  // Tint or shade according to lightness
  @if $lightness > 0 {
    $new-color: darken($new-color, $lightness);
  }
  @if $lightness < 0 {
    $new-color: lighten($new-color, abs($lightness));
  }

  // Adjust saturation
  @if $saturation < 100% {
    $new-color: desaturate($new-color, abs($saturation));
  }

  @return $new-color;
}

// Returns the complement of a color.
@function ryb-complement($color) {
  @return ryb-adjust-hue($color, 180deg);
}

// Returns the inverse of a color.
@function ryb-invert($color) {
  @return ryb-adjust-hue(hsl(hue($color), saturation(invert($color)), lightness(invert($color))), 180deg);
}